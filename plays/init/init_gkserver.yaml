- hosts: hosaka
  become: yes
  vars:
    user: ryan

  tasks:
  
#--- set timezone ---
  - name: set timezone to NY
    timezone:
      name: America/New_York

#--- add ssh pub key, load sshd config ---
  - name: Add SSH public key for user
    authorized_key:
      user: ryan
      key: "{{ lookup('file', '{{ ssh_public_key_file }}' ) }}"
      state: present

  - name: Add hardened SSH config
    copy:
      dest: /etc/ssh/sshd_config.d/
      src: ../files/00-sshd-custom.conf
      owner: root
      group: root
      mode: 0600
    notify: Reload SSH

  - name: Reload SSH
    service:
      name: ssh
      state: restarted

  #--- configure passwordless sudo ---
  - name: set passwordless sudo for {{ user }}
    lineinfile:
      path: "/etc/sudoers"
      line: "{{ user }} ALL=(ALL) NOPASSWD: ALL"
      insertafter: "@includedir /etc/sudoers.d"


#--- system update + upgrade ---
  - name: apt update + upgrade
    apt:
      state: latest
      upgrade: "full"
      update_cache: yes
      only_upgrade: yes
      autoclean: yes
      autoremove: yes
      cache_valid_time: 3600

#--- install core packages ---
  - name: install core packages, docker prereq
    apt:
      name: 
        - htop
        - tmux
        - nmap
        - wget
        - python3-pip
        - nano
        - lm-sensors
        - rclone
        - fish
        - tree
        - vim
        - smartmontools
        - unzip
        - zip
        - sysstat
        - net-tools
        - neofetch
        - iotop
        - htop
        - iftop
        - hdparm
        - rsync
        - parted
      state: latest

#--- install docker, docker compose ---
  - name: add docker gpg apt key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: add docker repo to apt
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present 
  
  - name: install docker prereq, docker community edition, and docker compose
    apt:
      name:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        - software-properties-common
        - docker-ce
        - docker-ce-cli
        - containerd.io  
        - docker-compose-plugin
      state: latest
  
  - name: create docker group
    group:
      name: docker
      state: present

  - name: add user to docker group
    user:
      name: "{{ user }}"
      groups: docker
      append: yes
      state: present

#--- install syncthing ---
  - name: add syncthing repo to apt
    apt_repository:
      repo: deb https://apt.syncthing.net/ syncthing stable
      state: present 
  
  - name: add syncthing pgp apt key
    apt_key:
      url: https://syncthing.net/release-key.txt
      state: present

  - name: install syncthing
    apt:
      name:
        - syncthing
      state: latest

  - name: enable syncthing service
    ansible.builtin.systemd:
      name: "syncthing@{{ user }}.service"
      enabled: true
      masked: no
  
  - name: start syncthing service
    service:
      name: "syncthing"
      state: "started"
      enabled: true

#--- install rclone ---
  - name: create temp rclone install directory
    ansible.builtin.file:
      path: "/tmp/rclone_install"
      mode: 0775
      state: directory

  - name: download and unzip rclone binary
    ansible.builtin.unarchive:
      src: https://downloads.rclone.org/rclone-current-linux-amd64.zip
      dest: "/tmp/rclone_install"
      remote_src: true
      mode: 0755
  
  - name: get list of files extracted from the rclone archive
    ansible.builtin.find:
      path: "/tmp/rclone_install"
      depth: 2
      file_type: directory
    register: rclone_archive
  
  - name: copy rclone binary to install location
    ansible.builtin.copy:
      src: "{{ rclone_archive.files[0].path }}/rclone"
      dest: "/usr/bin/"
      mode: 0755
      owner: "root"
      group: "root"
      force: true
      remote_src: true

  - name: delete temp rclone install directory
    ansible.builtin.file:
      path: "/tmp/rclone_install"
      state: absent

#--- configure git ---
  - name: set git user
    git_config:
      name: user.name
      scope: global
      value: "Ryan LaLiberty"
      state: present
    become_user: "{{ user }}"

  - name: set git email
    git_config:
      name: user.email
      scope: global
      value: "rycolos@gkserver.net"
      state: present
    become_user: "{{ user }}"

  - name: set git editor
    git_config:
      name: core.editor
      scope: global
      value: nano
      state: present
    become_user: "{{ user }}"

#--- assorted config ---
  - name: set default shell to fish
    user:
      name: "{{ user }}"
      shell: /usr/bin/fish
      state: present

#--- create directories and mount points ---
  - name: create dir for logs
    file:
      path: "/home/{{ user }}/logs"
      mode: 0775
      owner: "{{ user }}"
      group: "{{ user }}"
      state: directory

  - name: create mount points
    file:
      path: "/media/{{ item }}"
      mode: 0775
      owner: "{{ user }}"
      group: "{{ user }}"
      state: directory
      loop:
        - backup_int1
        - media_library
        - backup_ext1

#--- clone gkserver repo for scripts and docker compose config ---
  - name: clone gkserver-machine repo
    git:
      repo: https://github.com/rycolos/gkserver-machine.git
      dest: /home/{{ user }}/gkserver
    become_user: "{{ user }}"

#--- create cronjobs, but comment out ---
  - name: cron - retention policy
    cron:
      name: "retention policy - sat 2am"
      minute: "0"
      hour: "2"
      weekday: "5"
      job: /home/{{ user }}/gkserver/scripts/trash_clean.sh && echo "/home/{{ user }}/gkserver/scripts/trash_clean.sh"
      disable: true
      state: present

  - name: cron - music library backup
    cron:
      name: "music library backup - sun 12am"
      minute: "0"
      hour: "0"
      weekday: "0"
      job: /home/{{ user }}/gkserver/scripts/plex_gkserver_backup.sh
      disable: true
      state: present

  - name: cron - home to backup_main
    cron:
      name: "home to backup_main - daily 2am"
      minute: "0"
      hour: "2"
      job: /home/{{ user }}/gkserver/scripts/home_gkserver_backup.sh
      disable: true
      state: present

  - name: cron - docker-data to backup_main
    cron:
      name: "docker-data to backup_main - daily 3am"
      minute: "0"
      hour: "3"
      job: /home/{{ user }}/gkserver/scripts/docker_gkserver_backup.sh
      disable: true
      state: present

  - name: cron - backup_main to gdrive
    cron:
      name: "backup_main to gdrive - sun 2am"
      minute: "0"
      hour: "2"
      weekday: "6"
      job: /home/{{ user }}/gkserver/scripts/gdrive_gkserver_backup.sh
      disable: true
      state: present

  - name: cron - summarize backup logs
    cron:
      name: "summarize backup logs - daily 4am"
      minute: "0"
      hour: "4"
      job: tail -n 5 /home/{{ user }}/logs/*_backup.log > /home/{{user}}/logs/summary.log && echo "tail -n 5 /home/{{ user }}/logs/*_backup.log > /home/{{user}}/logs/summary.log"
      disable: true
      state: present
  
